# export KARPENTER_NAMESPACE="kube-system"
# export KARPENTER_VERSION="1.1.1"
# export K8S_VERSION="1.31"
# CLUSTER_NAME="demo-cluster"
# export TEMPOUT="$(mktemp)"

# curl -fsSL https://raw.githubusercontent.com/aws/karpenter-provider-aws/v"${KARPENTER_VERSION}"/website/content/en/preview/getting-started/getting-started-with-karpenter/cloudformation.yaml  > "${TEMPOUT}" \
# && aws cloudformation deploy \
#   --stack-name "Karpenter-${CLUSTER_NAME}" \
#   --template-file "${TEMPOUT}" \
#   --capabilities CAPABILITY_NAMED_IAM \
#   --parameter-overrides "ClusterName=${CLUSTER_NAME}"


apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: demo-cluster
  version: "1.31"
  region: ap-northeast-2
  tags:
    karpenter.sh/discovery: demo-cluster

vpc:
  subnets:
    public:
      public-a: { id: subnet-0b5cf28b37aa8bae0 }
      public-b: { id: subnet-0609311b859c1dd8e }
      public-c: { id: subnet-0a1ebc8f43050c027 }
    private:
      private-a: { id: subnet-052f61a84468a8fea }
      private-b: { id: subnet-03c79bcdc40fb9d56 }
      private-c: { id: subnet-0ff85f66951db7df5 }

iam:
  podIdentityAssociations:
  - namespace: "kube-system"
    serviceAccountName: karpenter
    roleName: demo-cluster-karpenter
    permissionPolicyARNs:
    - arn:aws:iam::226347592148:policy/KarpenterControllerPolicy-demo-cluster

iamIdentityMappings:
  - arn: arn:aws:iam::226347592148:role/root
    groups:
      - system:masters
    username: admin
    noDuplicateARNs: true # prevents shadowing of ARNs
  - arn: "arn:aws:iam::226347592148:role/KarpenterNodeRole-demo-cluster"
    username: system:node:{{EC2PrivateDNSName}}
    groups:
    - system:bootstrappers
    - system:nodes
    ## If you intend to run Windows workloads, the kube-proxy group should be specified.
    # For more information, see https://github.com/aws/karpenter/issues/5099.
    # - eks:kube-proxy-windows

managedNodeGroups:
  - name: test-app-ng
    labels: { role: apps }
    instanceType: t3.medium
    instanceName: test-app-ng
    desiredCapacity: 2
    minSize: 2
    maxSize: 20
    privateNetworking: true
    volumeType: gp3
    volumeEncrypted: true
    subnets:
      - private-a
      - private-b

addons:
- name: eks-pod-identity-agent
- name: vpc-cni
  podIdentityAssociations:
  - namespace: kube-system
    serviceAccountName: aws-node
    permissionPolicyARNs: ["arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"]

# helm upgrade --install karpenter oci://public.ecr.aws/karpenter/karpenter --version "${KARPENTER_VERSION}" --namespace "${KARPENTER_NAMESPACE}" --create-namespace \
#   --set "settings.clusterName=${CLUSTER_NAME}" \
#   --set "settings.interruptionQueue=${CLUSTER_NAME}" \
#   --set controller.resources.requests.cpu=1 \
#   --set controller.resources.requests.memory=1Gi \
#   --set controller.resources.limits.cpu=1 \
#   --set controller.resources.limits.memory=1Gi \
#   --wait

---
apiVersion: karpenter.sh/v1
kind: NodePool
metadata:
  name: default
spec:
  template:
    spec:
      requirements:
        - key: kubernetes.io/arch
          operator: In
          values: ["amd64"]
        - key: kubernetes.io/os
          operator: In
          values: ["linux"]
        - key: "topology.kubernetes.io/zone"
          operator: In
          values: ["ap-northeast-2a", "ap-northeast-2b"]
        - key: karpenter.sh/capacity-type
          operator: In
          values: ["spot"]
        - key: karpenter.k8s.aws/instance-family
          operator: In
          values: ["c6i"] #, "m6i", "r6i", "c7i", "m7i", "r7i"
        - key: karpenter.k8s.aws/instance-size
          operator: In
          values: ["large", "xlarge", "2xlarge"]
      nodeClassRef:
        group: karpenter.k8s.aws
        kind: EC2NodeClass
        name: default
  # limits:
  #   cpu: 1000
  # disruption:
  #   consolidationPolicy: WhenUnderutilized
  #   expireAfter: 720h # 30 * 24h = 720h
---
apiVersion: karpenter.k8s.aws/v1
kind: EC2NodeClass
metadata:
  name: default
spec:
  role: "KarpenterNodeRole-${CLUSTER_NAME}" # replace with your cluster name
  subnetSelectorTerms:
    - tags:
        karpenter.sh/discovery: "${CLUSTER_NAME}" # replace with your cluster name
  securityGroupSelectorTerms:
    - tags:
        karpenter.sh/discovery: "${CLUSTER_NAME}" # replace with your cluster name
  amiSelectorTerms:
   - alias: bottlerocket@latest