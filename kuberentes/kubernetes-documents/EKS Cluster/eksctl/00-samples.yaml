apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: demo-cluster
  version: "1.31"
  region: ap-northeast-2

fargateProfiles:
- name: service-nodes
  selectors:
  - namespace: default
  - namespace: kube-system

vpc:
  subnets:
    public:
      public-a: { id: subnet-0de093db087b818a0 }
      public-b: { id: subnet-0d3de82ba4d6b9370 }
    private:
      private-a: { id: subnet-0582f5b2cf19554e8 }
      private-b: { id: subnet-0035d77753e619793 }

accessConfig:
  authenticationMode: API_AND_CONFIG_MAP
  accessEntries:
    - principalARN: arn:aws:iam::226347592148:root
      accessPolicies:
        - policyARN: arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy
          accessScope:
            type: cluster

iamIdentityMappings:
  - arn: arn:aws:iam::226347592148:role/root
    groups:
      - system:masters
    username: admin
    noDuplicateARNs: true # prevents shadowing of ARNs

iam:
  withOIDC: true
  serviceAccounts:
  - metadata:
      name: appmesh-controller
      namespace: appmesh-system
    attachPolicyARNs:
      - "arn:aws:iam::aws:policy/AWSCloudMapFullAccess"
      - "arn:aws:iam::aws:policy/AWSAppMeshFullAccess"
  - metadata:
      name: aws-load-balancer-controller
      namespace: kube-system
    wellKnownPolicies:
      awsLoadBalancerController: true
  - metadata:
      name: ebs-csi-controller-sa
      namespace: kube-system
    wellKnownPolicies:
      ebsCSIController: true
  - metadata:
      name: efs-csi-controller-sa
      namespace: kube-system
    wellKnownPolicies:
      efsCSIController: true
  - metadata:
      name: external-dns
      namespace: kube-system
    wellKnownPolicies:
      externalDNS: true
  - metadata:
      name: cert-manager
      namespace: cert-manager
    wellKnownPolicies:
      certManager: true
  - metadata:
      name: cluster-autoscaler
      namespace: kube-system
      labels: {aws-usage: "cluster-ops"}
    wellKnownPolicies:
      autoScaler: true
  - metadata:
      name: build-service
      namespace: ci-cd
    wellKnownPolicies:
      imageBuilder: true
  - metadata:
      name: autoscaler-service
      namespace: kube-system
    attachPolicy:
      Version: "2012-10-17"
      Statement:
      - Effect: Allow
        Action:
        - "autoscaling:DescribeAutoScalingGroups"
        - "autoscaling:DescribeAutoScalingInstances"
        - "autoscaling:DescribeLaunchConfigurations"
        - "autoscaling:DescribeTags"
        - "autoscaling:SetDesiredCapacity"
        - "autoscaling:TerminateInstanceInAutoScalingGroup"
        - "ec2:DescribeLaunchTemplateVersions"
        Resource: '*'
  - metadata: 
      name: amazon-cloudwatch-observability
      namespace: amazon-cloudwatch
      labels: 
        aws-usage: "observability"
    attachPolicyARNs:
      - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
    roleName: batch4eks-cluster-amazon-cloudwatch-observability-role
    roleOnly: true

managedNodeGroups:
  - name: demo-app-ng
    labels: { role: apps }
    instanceType: t3.medium
    instanceName: demo-app-ng
    desiredCapacity: 2
    minSize: 2
    maxSize: 20
    privateNetworking: true
    volumeType: gp3
    volumeEncrypted: true
    subnets:
      - private-a
      - private-b
    tags:
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/demo-cluster: "owned"
    iam:
      withAddonPolicies:
        imageBuilder: true
        externalDNS: true
        certManager: true
        cloudWatch: true

addons: 
- name: aws-ebs-csi-driver
  version: latest
  wellKnownPolicies: 
    ebsCSIController: true
- name: amazon-cloudwatch-observability
  version: latest
  attachPolicyARNs:
    - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
    - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
  configurationValues: "{\"tolerations\": [{\"key\": \"batch.amazonaws.com/batch-node\",  \"operator\": \"Exists\" }]}"